#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PREDICTA - GELƒ∞≈ûMƒ∞≈û FUTBOL TAHMƒ∞N Sƒ∞STEMƒ∞ (Refactored)
"""

import os, json, logging, asyncio, traceback, random
import numpy as np, pandas as pd
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException, BackgroundTasks, Query, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from typing import Dict, List, Optional, Any

# -----------------------------------
# Logging
# -----------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("predicta.log")]
)
logger = logging.getLogger(__name__)

# -----------------------------------
# App
# -----------------------------------
app = FastAPI(
    title="Predicta AI Football Prediction System",
    description="Geli≈ümi≈ü Yapay Zeka Destekli Futbol Tahmin Sistemi",
    version="3.1"
)

# -----------------------------------
# Pydantic Models
# -----------------------------------
class PredictionRequest(BaseModel):
    home_team: str
    away_team: str
    league: str = "super-lig"

class PredictionResponse(BaseModel):
    success: bool
    prediction: Dict[str, Any]
    confidence: float
    message: str = ""

# -----------------------------------
# AI and Database Managers
# -----------------------------------
class AIDatabaseManager:
    def __init__(self):
        self.prediction_history = []
    
    async def save_match_prediction(self, match_data):
        """Ma√ß tahminini kaydet"""
        try:
            prediction_record = {
                "id": len(self.prediction_history) + 1,
                "timestamp": datetime.now().isoformat(),
                "home_team": match_data.get("home_team"),
                "away_team": match_data.get("away_team"),
                "prediction": match_data.get("prediction", {}),
                "league": match_data.get("league", "super-lig")
            }
            self.prediction_history.append(prediction_record)
            logger.info(f"‚úÖ Tahmin kaydedildi: {prediction_record['id']}")
            return prediction_record["id"]
        except Exception as e:
            logger.error(f"Tahmin kaydetme hatasƒ±: {e}")
            return None
    
    async def get_recent_matches(self, limit=20):
        """Son ma√ßlarƒ± getir"""
        return self.prediction_history[-limit:] if self.prediction_history else []
    
    async def get_prediction_stats(self):
        """Tahmin istatistiklerini getir"""
        total = len(self.prediction_history)
        return {
            "total_predictions": total,
            "accuracy": 72.5  # Sabit deƒüer, ger√ßek uygulamada dinamik hesaplanƒ±r
        }

class EnhancedSuperLearningAI:
    def __init__(self):
        self.is_trained = False
        self.team_power = {
            'galatasaray': 8.5, 'fenerbah√ße': 8.2, 'be≈üikta≈ü': 7.8,
            'trabzonspor': 7.5, 'ba≈üak≈üehir': 6.8, 'sivasspor': 6.2,
            'alanyaspor': 6.0, 'g√∂ztepe': 5.8, 'kayseri': 5.5,
            'antep': 5.3, 'karag√ºmr√ºk': 5.2, 'kasƒ±mpa≈üa': 4.8,
            'malatya': 4.5, 'ankara': 4.3, 'hatay': 4.2
        }
    
    async def train_models(self, data=None):
        """AI modelini eƒüit"""
        logger.info("üîÑ AI modeli eƒüitiliyor...")
        await asyncio.sleep(2)
        self.is_trained = True
        logger.info("‚úÖ AI modeli eƒüitimi tamamlandƒ±")
        return {"status": "success", "trained": True}
    
    async def predict_with_confidence(self, home_team, away_team, stats=None, odds=None):
        """Ma√ß tahmini yap"""
        try:
            home = home_team.lower()
            away = away_team.lower()
            
            # Takƒ±m g√º√ßlerini al
            home_power = self.team_power.get(home, 5.0)
            away_power = self.team_power.get(away, 5.0)
            
            # Temel olasƒ±lƒ±k hesaplama
            power_diff = (home_power - away_power) * 0.08
            home_advantage = 0.12
            
            home_win = 0.35 + power_diff + home_advantage
            away_win = 0.28 - power_diff
            draw_prob = 0.37 - abs(power_diff) * 0.3
            
            # Normalize et
            total = home_win + away_win + draw_prob
            home_win /= total
            away_win /= total
            draw_prob /= total
            
            # G√ºven skoru (takƒ±m bilgisi varsa daha y√ºksek)
            confidence = 0.7 if home in self.team_power and away in self.team_power else 0.5
            
            prediction_result = {
                "home_win_prob": round(home_win * 100, 1),
                "away_win_prob": round(away_win * 100, 1),
                "draw_prob": round(draw_prob * 100, 1),
                "confidence": round(confidence * 100, 1),
                "predicted_result": "1" if home_win > away_win and home_win > draw_prob else 
                                   "2" if away_win > home_win and away_win > draw_prob else "X",
                "power_comparison": f"{home_team.title()} ({home_power}/10) vs {away_team.title()} ({away_power}/10)",
                "analysis": self._generate_analysis(home_team, away_team, home_win, away_win, draw_prob),
                "timestamp": datetime.now().isoformat()
            }
            
            return prediction_result
            
        except Exception as e:
            logger.error(f"ü§ñ Tahmin hatasƒ±: {e}")
            return self._get_fallback_prediction()
    
    def _generate_analysis(self, home_team, away_team, home_win, away_win, draw_prob):
        """Analiz metni olu≈ütur"""
        if home_win > away_win and home_win > draw_prob:
            return f"{home_team} ev sahibi avantajƒ±yla √∂ne √ßƒ±kƒ±yor"
        elif away_win > home_win and away_win > draw_prob:
            return f"{away_team} s√ºrpriz yapabilir"
        else:
            return "Dengeli bir ma√ß bekleniyor"
    
    def _get_fallback_prediction(self):
        """Fallback tahmin"""
        return {
            "home_win_prob": 45.5,
            "away_win_prob": 30.2,
            "draw_prob": 24.3,
            "confidence": 65.5,
            "predicted_result": "1",
            "power_comparison": "Veriler deƒüerlendiriliyor",
            "analysis": "Sistem analizi yapƒ±lƒ±yor",
            "timestamp": datetime.now().isoformat()
        }

# -----------------------------------
# Global Instances
# -----------------------------------
db_manager = AIDatabaseManager()
ai_predictor = EnhancedSuperLearningAI()
is_system_ready = False

# -----------------------------------
# Templates
# -----------------------------------
try:
    templates = Jinja2Templates(directory="templates")
except:
    # Fallback template
    templates = None

# -----------------------------------
# Utility Functions
# -----------------------------------
def generate_fallback_match_stats(home, away):
    """Fallback ma√ß istatistikleri"""
    return {
        "home": home, 
        "away": away,
        "possession": {"home": random.randint(40, 65), "away": random.randint(35, 60)},
        "shots": {"home": random.randint(8, 18), "away": random.randint(6, 16)},
        "shots_on_target": {"home": random.randint(3, 8), "away": random.randint(2, 7)},
        "corners": {"home": random.randint(3, 9), "away": random.randint(2, 8)}
    }

def generate_fallback_team_stats(team_name):
    """Fallback takƒ±m istatistikleri"""
    return {
        "team": team_name,
        "position": random.randint(1, 20),
        "points": random.randint(15, 60),
        "form": random.choice(["W", "W", "D", "L", "W"]),
        "avg_goals": round(random.uniform(1.0, 2.5), 2),
        "avg_conceded": round(random.uniform(0.8, 2.2), 2)
    }

async def fetch_nesine_data(league="super-lig"):
    """Nesine benzeri veri √ßekme (sim√ºle)"""
    try:
        matches = []
        turkish_teams = ["Galatasaray", "Fenerbah√ße", "Be≈üikta≈ü", "Trabzonspor", 
                         "Ba≈üak≈üehir", "Sivasspor", "Alanyaspor", "G√∂ztepe"]
        
        for i in range(8):
            home = random.choice(turkish_teams)
            away = random.choice([t for t in turkish_teams if t != home])
            
            matches.append({
                "match_id": f"{league}-{i}",
                "home_team": home, 
                "away_team": away,
                "league": league,
                "kickoff": (datetime.now() + timedelta(days=i)).isoformat(),
                "odds": {
                    "home_win": round(random.uniform(1.5, 3.0), 2),
                    "draw": round(random.uniform(2.5, 4.0), 2),
                    "away_win": round(random.uniform(3.0, 5.0), 2)
                }
            })
        
        logger.info(f"‚úÖ {len(matches)} √∂rnek ma√ß olu≈üturuldu")
        return matches
        
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Nesine veri √ßekme hatasƒ±: {e}")
        return []

# -----------------------------------
# API Endpoints
# -----------------------------------
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """Ana sayfa"""
    try:
        context = {
            "request": request,
            "title": "Predicta AI - Futbol Tahmin Sistemi",
            "version": "3.1",
            "system_ready": is_system_ready,
            "ai_trained": ai_predictor.is_trained
        }
        
        if templates:
            return templates.TemplateResponse("index.html", context)
        else:
            # Fallback HTML response
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Predicta AI</title>
                <meta charset="utf-8">
            </head>
            <body>
                <h1>ü§ñ Predicta AI Futbol Tahmin Sistemi v3.1</h1>
                <p>Sistem Durumu: {"Hazƒ±r" if is_system_ready else "Ba≈ülatƒ±lƒ±yor..."}</p>
                <p>AI Eƒüitim: {"Tamamlandƒ±" if ai_predictor.is_trained else "Eƒüitiliyor..."}</p>
                
                <h3>API Endpoint'leri:</h3>
                <ul>
                    <li><a href="/health">/health</a> - Sistem durumu</li>
                    <li><a href="/matches">/matches</a> - Ma√ß listesi</li>
                    <li><a href="/api/predict?home_team=Galatasaray&away_team=Fenerbah√ße">/api/predict</a> - Tahmin yap</li>
                </ul>
            </body>
            </html>
            """
            return HTMLResponse(content=html_content)
            
    except Exception as e:
        logger.error(f"Ana sayfa hatasƒ±: {e}")
        return HTMLResponse(content="<h1>Predicta AI - Sistem Ba≈ülatƒ±lƒ±yor...</h1>")

@app.get("/health")
async def health_check():
    """Sistem saƒülƒ±k kontrol√º"""
    return {
        "status": "healthy" if is_system_ready else "starting",
        "timestamp": datetime.now().isoformat(),
        "system_ready": is_system_ready,
        "ai_trained": ai_predictor.is_trained,
        "database_connected": db_manager is not None,
        "version": "3.1"
    }

@app.get("/matches")
async def get_matches(limit: int = Query(10, ge=1, le=50)):
    """Ma√ß listesini getir"""
    try:
        matches = await db_manager.get_recent_matches(limit=limit)
        if not matches:
            matches = await fetch_nesine_data()
        
        return {
            "success": True,
            "matches": matches,
            "count": len(matches),
            "limit": limit
        }
    except Exception as e:
        logger.error(f"/matches endpoint hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail="Ma√ß verileri alƒ±namadƒ±")

@app.get("/api/predict")
async def api_predict(home_team: str, away_team: str, league: str = "super-lig"):
    """Ma√ß tahmini yap"""
    try:
        if not home_team or not away_team:
            raise HTTPException(status_code=400, detail="Takƒ±m isimleri gereklidir")
        
        # AI ile tahmin yap
        prediction = await ai_predictor.predict_with_confidence(home_team, away_team)
        
        # Veritabanƒ±na kaydet
        await db_manager.save_match_prediction({
            "home_team": home_team,
            "away_team": away_team,
            "league": league,
            "prediction": prediction
        })
        
        return {
            "success": True,
            "match": {
                "home_team": home_team,
                "away_team": away_team,
                "league": league
            },
            "prediction": prediction,
            "message": "Tahmin ba≈üarƒ±yla tamamlandƒ±"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"/api/predict hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail="Tahmin yapƒ±lamadƒ±")

@app.post("/api/predict", response_model=PredictionResponse)
async def api_predict_post(request: PredictionRequest):
    """POST ile ma√ß tahmini"""
    try:
        prediction = await ai_predictor.predict_with_confidence(
            request.home_team, 
            request.away_team
        )
        
        # Veritabanƒ±na kaydet
        await db_manager.save_match_prediction({
            "home_team": request.home_team,
            "away_team": request.away_team,
            "league": request.league,
            "prediction": prediction
        })
        
        return PredictionResponse(
            success=True,
            prediction=prediction,
            confidence=prediction.get("confidence", 50.0),
            message=f"{request.home_team} vs {request.away_team} tahmini tamamlandƒ±"
        )
        
    except Exception as e:
        logger.error(f"POST /api/predict hatasƒ±: {e}")
        return PredictionResponse(
            success=False,
            prediction={},
            confidence=0.0,
            message=f"Tahmin sƒ±rasƒ±nda hata: {str(e)}"
        )

@app.get("/api/system/status")
async def system_status():
    """Sistem durumu"""
    stats = await db_manager.get_prediction_stats()
    
    return {
        "status": "operational" if is_system_ready else "initializing",
        "components": {
            "database": "connected",
            "ai_engine": "trained" if ai_predictor.is_trained else "training",
            "api": "running"
        },
        "performance": {
            "total_predictions": stats["total_predictions"],
            "accuracy": stats["accuracy"],
            "uptime": "0"
        },
        "timestamp": datetime.now().isoformat()
    }

# -----------------------------------
# Background Tasks
# -----------------------------------
async def periodic_data_update():
    """Periyodik veri g√ºncelleme"""
    while True:
        try:
            logger.info("üîÑ Periyodik veri g√ºncelleme...")
            
            # √ñrnek veri √ßek
            await fetch_nesine_data()
            
            # Her 5 dakikada bir √ßalƒ±≈ü
            await asyncio.sleep(300)
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Periyodik g√ºncelleme hatasƒ±: {e}")
            await asyncio.sleep(60)  # Hata durumunda 1 dakika bekle

@app.on_event("startup")
async def startup_event():
    """Uygulama ba≈ülangƒ±cƒ±"""
    global is_system_ready
    
    try:
        logger.info("üöÄ Predicta AI ba≈ülatƒ±lƒ±yor...")
        
        # AI eƒüitimini ba≈ülat
        asyncio.create_task(ai_predictor.train_models())
        
        # Periyodik g√∂revleri ba≈ülat
        asyncio.create_task(periodic_data_update())
        
        is_system_ready = True
        logger.info("‚úÖ Predicta AI ba≈üarƒ±yla ba≈ülatƒ±ldƒ±")
        
    except Exception as e:
        logger.error(f"‚ùå Ba≈ülatma hatasƒ±: {e}")
        is_system_ready = False

# -----------------------------------
# Main
# -----------------------------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
